
# user  staff;
worker_processes  1;

error_log  /Users/JPZ7123/talkn-server/logs/error.log;

events {
  worker_connections  1024;
}

http {
  lua_package_path "/usr/local/openresty/site/lualib/?.lua;;";

  # JSONファイルからのルーティングテーブルの読み込み
  init_by_lua_block {
    local cjson = require "cjson"
    local filepath = "./contracts.json"
    local file = assert(io.open(filepath, "r"))
    local content = file:read("*a")
    file:close()
    routing_table = cjson.decode(content)
  }

  server {
    listen 10443 ssl;
    server_name 127.0.0.1;

    ssl_certificate     ../../talkn-common/certs/localhost.crt;
    ssl_certificate_key ../../talkn-common/certs/localhost.key;
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_ciphers         HIGH:!aNULL:!MD5;

    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_http_version 1.1;
    proxy_set_header Host $host;
    proxy_set_header Access-Control-Allow-Origin "*";
    proxy_set_header Access-Control-Allow-Methods "POST, GET, PUT, DELETE, OPTIONS";
    proxy_set_header Access-Control-Allow-Headers "DNT, X-Mx-ReqToken, Keep-Alive, User-Agent, X-Requested-With, If-Modified-Since, Cache-Control, Content-Type";
    proxy_set_header Access-Control-Allow-Credentials true;
    
    # リクエストごとにプロキシ先を動的に決定
    # set_by_lua_block $target {
    #   local uri = ngx.var.uri
    #   for _, contract in ipairs(routing_table.contracts) do
    #     if uri:find(contract.location) then
    #       return contract.proxy_pass
    #     end
    #   end
    #   return "https://127.0.0.1:10444/socket.io/"
    # }

    location /aa.com/ {
      proxy_pass https://127.0.0.1:10445/socket.io/aa.com/;
    }

    location / {
      # proxy_pass $target;
      proxy_pass https://127.0.0.1:10444/socket.io/;
    }
  }
}
